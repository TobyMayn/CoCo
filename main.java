import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("a1 Interpreter\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	a1Lexer lex = new a1Lexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	a1Parser parser = new a1Parser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	Expr result=interpreter.visit(parseTree);
	System.out.println("The result is: "+result.eval());
    }
}

// We write an interpreter that implements interface
// "a1Visitor<T>" that is automatically generated by ANTLR

class Interpreter extends AbstractParseTreeVisitor<AST> implements a1Visitor<AST> {

    public AST visitStart(a1Parser.StartContext ctx){
		List<Variable> in = new ArrayList<>();
		List<Variable> out = new ArrayList<>();
		List<LatchDec> latch = new ArrayList<>();
		List<UpdateDecl> up = new ArrayList<>();
		List<SimInp> sim = new ArrayList<>();

		for (Variable inVariable : ctx.i) {
			in.add(inVariable.getText());
		}

		for (Variable outVariable : ctx.os) {
			out.add(outVariable.getText());
		}

		for (int i = 0; i < ctx.latch.size(); i++) {
			LatchDec lat = (LatchDec) visitLatchDec(ctx.latch.get(i));
			latch.add(lat);
		}

		for (int i = 0; i < ctx.up.size(); i++) {
			UpdateDecl update = (UpdateDecl) visitUpdateDecl((a1Parser.UpdateDeclContext) ctx.up.get(i));
			up.add(update);
		}

		for (int i = 0; i < ctx.sim.size(); i++) {
			SimInp simulate = (SimInp) visitSimInp(ctx.sim.get(i));
			sim.add(simulate);
		}
		return new Simulator(in, out, latch, up, sim);
    };

	public AST visitUpdateDecl(a1Parser.UpdateDeclContext ctx) {
		return new UpdateDecl(visit(ctx.v1), ctx.e1);
	}

	public AST visitSimInp(a1Parser.SimInpContext ctx){
		Variable var1 = new Variable(ctx.v1.getText());
		return new SimInp(ctx.v1, ctx.c);
	}

	public AST visitLatchDec(a1Parser.LatchDecContext ctx) {
		return new LatchDec(ctx.v1, ctx.v2);
	}	

    public AST visitNot(a1Parser.NotContext ctx){
	    return new Not(visit(ctx.e1));
    };
    public AST visitAnd(a1Parser.AndContext ctx){
	    return new And(visit(ctx.e1),visit(ctx.e2));
    };
    public AST visitVariable(a1Parser.VariableContext ctx){
		return new Variable(ctx.v1.getText());
    };
    public AST visitConst(a1Parser.ConstContext ctx){
		return new Constant(ctx.c.getText());
    };
    public AST visitParenthesis(a1Parser.ParenthesisContext ctx){
		return visit(ctx.e1);
    };
    public AST visitOr(a1Parser.OrContext ctx){
	    return new Or(visit(ctx.e1),visit(ctx.e2));
    }
}

